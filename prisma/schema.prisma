generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          String     @default("COMPANY_TEAM_MEMBER")
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  companyId     String?
  clients       Client[]
  responses     Response[]
  surveys       Survey[]
  teams         Team[]
  company       Company?   @relation(fields: [companyId], references: [id])
  errorLogs     ErrorLog[]
  twoFactorEnabled Boolean @default(false)
  twoFactorSecret  String?
  backupCodes     String[]  @default([])
  notificationPreferences Json? @default("{\"email\": true, \"push\": true, \"inApp\": true}")
  pushSubscription Json?

  @@index([companyId])
  @@map("users")
}

model Company {
  id               String   @id @default(cuid())
  name             String
  subscriptionTier String   @default("FREE")
  status           String   @default("ACTIVE")
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  clients          Client[]
  surveys          Survey[]
  users            User[]
  roleTemplates    RoleTemplate[]

  @@map("companies")
}

model Client {
  id        String   @id @default(cuid())
  name      String
  email     String
  phone     String?
  company   String?
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  companyId String?
  Company   Company? @relation(fields: [companyId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  surveys   Survey[]

  @@map("clients")
}

model Survey {
  id          String     @id @default(cuid())
  title       String
  description String?
  status      SurveyStatus @default(DRAFT)
  frequency   String     @default("MONTHLY")
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  userId      String
  clientId    String
  companyId   String
  questions   Question[]
  responses   Response[]
  client      Client     @relation(fields: [clientId], references: [id])
  company     Company    @relation(fields: [companyId], references: [id])
  user        User       @relation(fields: [userId], references: [id])

  @@map("surveys")
}

model Question {
  id       String  @id @default(cuid())
  title    String
  type     String  @default("TEXT")
  options  String?
  required Boolean @default(false)
  surveyId String
  survey   Survey  @relation(fields: [surveyId], references: [id])

  @@map("questions")
}

model Response {
  id        String   @id @default(cuid())
  surveyId  String
  userId    String
  answers   Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  survey    Survey   @relation(fields: [surveyId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@index([surveyId])
  @@index([userId])
  @@map("responses")
}

model Team {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id])

  @@map("teams")
}

model ErrorLog {
  id             String   @id @default(cuid())
  message        String
  stack          String?
  componentStack String?
  path           String?
  userId         String?
  metadata       Json?
  createdAt      DateTime @default(now())
  user           User?    @relation(fields: [userId], references: [id])

  @@index([userId])
  @@map("error_logs")
}

model RoleTemplate {
  id          String   @id @default(cuid())
  name        String
  description String
  permissions String[]
  company     Company  @relation(fields: [companyId], references: [id])
  companyId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([companyId])
}

enum Role {
  SUPER_ADMIN
  COMPANY_ADMIN
  TEAM_MEMBER
  CLIENT
}

enum SurveyStatus {
  DRAFT
  IN_PROGRESS
  COMPLETED
  ARCHIVED
}
